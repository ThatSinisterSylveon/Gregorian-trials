import tdl
import colors
from random import randint

targeting = False
WALL_DARK = (175, 25, 20)
FLOOR_DARK = (100, 100, 150)
color_dark_wall = (0, 0, 100)
color_light_wall = (130, 110, 50)
color_dark_ground = (50, 50, 150)
color_light_ground = (200, 180, 50)
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
RED = (255, 0, 0)
GREEN = (0, 255, 0)
BLUE = (0, 0, 255)
SCREEN_WIDTH = 80
SCREEN_HEIGHT = 50
MAP_WIDTH = 80
MAP_HEIGHT = 45
LIMIT_FPS = 20
ROOM_MAX_SIZE = 10
ROOM_MIN_SIZE = 6
MAX_ROOMS = 20  
FOV_ALGO = 'BASIC'
FOV_LIGHT_WALLS = True
TORCH_RADIUS = 10

##CLASSES##

class Rect:
    def __init__(self, x, y, w, h):
        self.x1 = x
        self.y1 = y
        self.x2 = x + w
        self.y2 = y + h
    def center(self):
        center_x = (self.x1 + self.x2) // 2
        center_y = (self.y1 + self.y2) // 2
        return (center_x, center_y)
    def intersect(self, other):
        return(self.x1 <= other.x2 and self.x2 >= other.x1 and
               self.y1 <= other.y2 and self.y2 >= other.y1)

class Tile():
    def __init__(self, blocked, block_sight = None):
        self.explored = False
        self.blocked = blocked
        if block_sight is None:
            block_sight = blocked
        self.block_sight = block_sight

class Weapon():
    def __init__(self, weapon_type):
        self.weapon_type = weapon_type
        if self.weapon_type == 'dagger':
            self.range = 1
            self.modifier = 'dex'
            self.to_hit = '1d6'
            self.damage = '1d4'
            self.damage_type = 'piercing'
            self.durablility = 10
            durability_range = (-10, 5)
        elif self.weapon_type == 'longsword':
            self.range = 1
            self.modifier = 'str'
            self.to_hit = '1d4'
            self.damage = '1d8'
            self.damage_type = 'slashing'
            self.durablility = 10
            durability_range = (-5, 10)
        elif self.weapon_type == 'hammer':
            self.range = 1
            self.modifier = 'str'
            self.to_hit = '0'
            self.damage = '1d8'
            self.damage_type = 'crushing'
            self.durablility = 20
            durability_range = (-10, 20)
        elif self.weapon_type == 'throwing axe':
            self.range = 5
            self.modifier = '0'
            self.to_hit = '1d6'
            self.damage = '1d6'
            self.damage_type = 'slashing'
            self.durablility = 10
            durability_range = (-5, 10)
        elif self.weapon_type == 'spear':
            self.range = 3
            self.modifier = 'str'
            self.to_hit = '0'
            self.damage = '1d6'
            self.damage_type = 'piercing'
            self.durablility = 15
            durability_range = (-5, 15)
        elif self.weapon_type == 'boomstick':
            self.range = 10
            self.modifier = 'dex'
            self.to_hit = '-2d4D1'
            self.damage = '1d4'
            self.damage_type = 'piercing'
            self.durablility = 10
            durability_range = (-10, 5)
        else:
            self.range = 1
            self.modifier = 'int'
            self.to_hit = 0
            self.damage = '1d10'
            self.damage_type = 'piercing'
            self.durablility = 100
            durability_range = (-100, 100) 
        
class GameObject():
    def __init__(self, x, y, char, name, color, blocks=False):
        self.name = name
        self.blocks = blocks
        self.x = x
        self.y = y
        self.char = char
        self.color = color

    def noclip_move(self, dx, dy):
        self.x += dx
        self.y += dy
    def move(self, dx, dy):
        for obj in objects:
            print(obj.x, obj.y)
        print(self.x+dx, self.y+dy)
        print(is_blocked(self.x +dx, self.y + dy))
        if not is_blocked(self.x +dx, self.y + dy):
            self.x += dx
            self.y += dy
    def draw(self):
        if (self.x, self.y) in visible_tiles:
            #print(self.char)
            #print('im in visible tiles')
            con.draw_char(self.x, self.y, self.char, self.color)
        else:
            self.clear()
    def clear(self):
        con.draw_char(self.x, self.y, ' ', self.color, bg=None)

class Character(GameObject):
    def __init__ (self, x, y, char, color, hp, ac, str, dex, int, weapon,  blocks=False  ):
        self.blocks = blocks
        self.x = x
        self.y = y
        self.char = char
        self.color = color
        self.hp = hp
        self.ac = ac
        self.str = str
        self.dex = dex
        self.int = int
        self.weapon_equiped = weapon
    def attack(self):
        if self.char == '@':
            global target_icon
            target_icon = GameObject(player.x, player.y+1, '+', 'target', GREEN) 
            target_icon.x = player.x
            target_icon.y = player.y+1
            objects.append(target_icon)
            targeting = True
            while targeting == True:
                render_all()
                target_icon.draw()
                tdl.flush()
                target_icon.clear()
                returned = handle_keys(targeting,self.weapon_equiped.range)
                if returned == 'leave':
                    objects.remove(target_icon)
                    return
                print(returned)
                if returned:
                    target = returned[0]
                    targeting = returned[1]
            objects.remove(target_icon)
        else:
            target = player
        d20 = roll_die('1d20')
        to_hit = roll_die(self.weapon_equiped.to_hit)
        if self.weapon_equiped.modifier == 'str':
            mod = self.str
        elif self.weapon_equiped.modifier == 'dex':
            mod = self.dex
        elif self.weapon_equiped.modifier == 'int':
            mod = self.int
        total_to_hit = d20 + to_hit + mod
        print(d20, to_hit, mod)
        print(total_to_hit)

        if total_to_hit > target.ac:
            damage_die = roll_die(self.weapon_equiped.damage)
            total_damage = damage_die + mod
            target.hp -= total_damage
            print('target has %s hp' %str(target.hp))

class Monster(Character):
    def __init__ (self, x, y, char, color, hp, ac, str, dex, int, weapon, agro_radius, blocks=False):
        self.blocks = blocks
        self.x = x
        self.y = y
        self.char = char
        self.color = color
        self.hp = hp
        self.ac = ac
        self.str = str
        self.dex = dex
        self.int = int
        self.weapon_equiped = weapon
        self.agro_radius = agro_radius
        self.player_distance = max(self.x-player.x, self.y-player.y)
    def move_to_player(self):
        dx = self.x - player.x
        dy = self.y -  player.y
        self.x += dx
        self.y += dy

    
        
##Functions##
def is_blocked(x,y):
    if my_map[x][y].blocked:
        return True
    for obj in objects:
        if obj.blocks and obj.x == x and obj.y == y:
            return True
    return False
def monster_turn():
    print('test')
    for monster in monsters:
        if monster.player_distance <= monster.agro_radius:
            distance = max(monster.x-player.x, monster.y-player.y)
            if distance > monster.weapon_equiped.range:
                monster.move_to_player()
            else:
                monster.attack()
                
def kill_char():
    for char in characters:
        if char.hp <= 0:
            characters.remove(char)
def roll_die(die):
    if die == '1d4':
        return randint(1, 4)
    elif die == '1d6':
        return randint(1, 6)
    elif die == '1d8':
        return randint(1, 8)
    elif die == '1d10':
        return randint(1,10)
    elif die == '1d12':
        return randint(1, 12)
    elif die == '1d20':
        return randint(1, 20)
    elif die == '-2d4D1':
        return min((randint(1,4), randint(1,4)))
    elif die == 0:
        return 0
    else:
        return 0
def create_h_tunnel(x1, x2, y):
    global my_map
    for x in range(min(x1,x2), max(x1,x2)+1):
        my_map[x][y].blocked = False
        my_map[x][y].block_sight = False
def create_v_tunnel(y1, y2, x):
    global my_map
    for y in range(min(y1,y2), max(y1,y2)+1):
        my_map[x][y].blocked = False
        my_map[x][y].block_sight = False
def create_room(room):
    global my_map
    for x in range(room.x1+1, room.x2):
        for y in range(room.y1+1, room.y2):
            my_map[x][y].blocked = False
            my_map[x][y].block_sight = False
def make_map():
    global my_map
    #fill map with "blocked" tiles
    my_map = [[ Tile(True)
        for y in range(MAP_HEIGHT) ]
            for x in range(MAP_WIDTH) ]
 
    rooms = []
    num_rooms = 0
    for r in range(MAX_ROOMS):
        w = randint(ROOM_MIN_SIZE, ROOM_MAX_SIZE)
        h = randint(ROOM_MIN_SIZE, ROOM_MAX_SIZE)
        x = randint(0, MAP_WIDTH-w-1)
        y = randint(0, MAP_HEIGHT-h-1)
        new_room = Rect(x, y, w, h)
        print(new_room.x1, new_room.y1)
        failed = False
        for other_rooms in rooms:
            if new_room.intersect(other_rooms):
                print('fail')
                failed = True
                break
        if not failed:
            create_room(new_room)
            (new_x, new_y) = new_room.center()

            if num_rooms == 0:
                player.x = new_x
                player.y = new_y
                goblin.x = player.x+1
                goblin.y = player.y+1
            else:
                (prev_x, prev_y) = rooms[num_rooms-1].center()
                if randint(0, 1):
                    create_h_tunnel(prev_x, new_x, prev_y)
                    create_v_tunnel(prev_y, new_y, new_x)
                else:
                    create_v_tunnel(prev_y, new_y, prev_x)
                    create_h_tunnel(prev_x, new_x, new_y)
            rooms.append(new_room)
            num_rooms += 1
def is_visible_tile(x, y):
    global my_map

    if x >= MAP_WIDTH or x < 0:
        return False
    elif y >= MAP_HEIGHT or y < 0:
        return False
    elif my_map[x][y].blocked == True:
        return False
    elif my_map[x][y].block_sight == True:
        return False
    else:
        return True
def render_all():
    global fov_recompute
    global visible_tiles
    if fov_recompute:
        print('2')
        fov_recompute = False
        visible_tiles = tdl.map.quickFOV(player.x, player.y,
                                          is_visible_tile,
                                          fov=FOV_ALGO,
                                          radius=TORCH_RADIUS,
                                          lightWalls=FOV_LIGHT_WALLS)
                                          
    #go through all tiles, and set their background color
    for y in range(MAP_HEIGHT):
        for x in range(MAP_WIDTH):
            visible = (x,y) in visible_tiles
            wall = my_map[x][y].block_sight
            if not visible:
                if my_map[x][y].explored:
                    if wall:
                        con.draw_char(x, y, None, fg=None, bg=color_dark_wall)
                    else:
                        con.draw_char(x, y, None, fg=None, bg=color_dark_ground)
            else:
                if wall:
                    con.draw_char(x,y, None, fg=None, bg=color_light_wall)
                else:
                    con.draw_char(x,y, None, fg=None, bg=color_light_ground)
                my_map[x][y].explored = True
    #draw all objects in the list
    for cha in characters:
        cha.draw()
    for obj in objects:
        obj.draw()

    #blit the contents of "con" to the root console and present it
    root.blit(con, 0, 0, SCREEN_WIDTH, SCREEN_HEIGHT, 0, 0)
    tdl.flush
    for object in objects:
        object.clear()
   
def handle_keys(targeting = None, range = None):
    global playerx, playery, fov_recompute
    user_input = tdl.event.key_wait()
    print(user_input)
    if user_input.key == 'UP':
        if targeting == True:
            target_icon.noclip_move(0, -1)
            return 
        else:
            player.move(0, -1)
            fov_recompute = True
    elif user_input.key == 'DOWN':
        if targeting == True:
            target_icon.noclip_move(0, 1)
            return 
        else:
            player.move(0, 1)
            fov_recompute = True
    elif user_input.key == 'RIGHT':
        if targeting == True:
            target_icon.noclip_move(1, 0)
            return 
        else:
            player.move(1, 0)
            fov_recompute = True
    elif user_input.key == 'LEFT':
        if targeting == True:
            target_icon.noclip_move(-1, 0)
            return 
        else:
            player.move(-1, 0)
            fov_recompute = True
    print(targeting)
    if user_input.char == 'a' and targeting != True:
        player.attack()
    if user_input.key == 'ENTER' and targeting == True:
        for cha in characters:
            if cha.x == target_icon.x and cha.y == target_icon.y:
                print(range)
                print(max(cha.x-player.x, cha.y-player.y))
                if range >= max(cha.x-player.x, cha.y-player.y):
                    return (cha, False)
                else:
                    return
    if user_input.key == 'ESCAPE' and targeting == True:
        return 'leave'
    if user_input.key == 'ENTER' and user_input.alt:
            print('made')
            tdl.set_fullscreen(not tdl.get_fullscreen())
    elif user_input.key == 'ESCAPE':
        return True
dagger = Weapon('dagger')
player = Character(SCREEN_WIDTH//2, SCREEN_HEIGHT//2, '@', WHITE, 10, 10, 1,1, 1, dagger)  
goblin = Monster(SCREEN_WIDTH//2+1, SCREEN_HEIGHT//2+1, 'g', GREEN, 10, 10, 1,1, 1, dagger,5, True)
lich = Monster(SCREEN_WIDTH//2+1, SCREEN_HEIGHT//2+1, 'l', GREEN, 10, 10, 1,1, 1, dagger,10)
npc = GameObject(40, 16, 'v', 'villager', GREEN)
monsters = [goblin, lich]
objects = [player, npc, goblin, lich]
tdl.set_font('arial10x10.png', greyscale=True, altLayout=True)
root = tdl.init(SCREEN_WIDTH, SCREEN_HEIGHT, title="Roguelike", fullscreen=False)
con = tdl.Console(SCREEN_WIDTH, SCREEN_HEIGHT) 
characters = [player, goblin, lich]
#tdl.setFPS(LIMIT_FPS)
make_map()
fov_recompute = True
while not tdl.event.is_window_closed():
    kill_char()
    #monster_turn()
    targeting = False
    #player.attack(goblin)
    render_all()
    tdl.flush()
    exit_game = handle_keys()
    if goblin in monsters:
        monsters.remove(goblin)
    if exit_game:
        break

